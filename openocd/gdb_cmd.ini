##
## Filename:
## gdb_cmd.ini
##
## Description:
## GDB macro definitions for an AT91Bootstrap/application
## debug session using the JTAG debugger Olimex ARM-USB-OCD.
##
## Usage:
## 1) Start OpenOCD
##    openocd --file ./openocd.cfg
##
## 2) Start GDB
##    arm-eabi-gdb --command=./gdb_cmd.ini <path_to_ELF_to_debug>
##

##################################################################
# Configuration
##################################################################
# initial SRAM hw-breakpoint in AT91Bootstrap,
# bypassing the load of U-Boot from NandFlash to SDRAM
set $AT91_BREAK_ADDR = 0x2001c0
print/x $AT91_BREAK_ADDR

# bare-metal application link address (SDRAM)
set $APP_LINK_ADDR = 0x22200000
print/x $APP_LINK_ADDR

##################################################################
# Prepare the application debug session.
#  -connect to OpenOCD
#  -setup JTAG
##################################################################
define init_ocd
  target remote localhost:1972
  mon init
  mon reset halt
  mon reset init
  eval "mon rbp 0x%x", $AT91_BREAK_ADDR
  mon halt
  mon arm7_9 fast_memory_access enable
  mon jtag_khz 1000
end

document init_ocd
Setup JTAG debugger Olimex ARM-USB-OCD for debug session
end

##################################################################
# Update AT91Bootstrap (BIN-->NandFlash)
#  - address=0x0000_0000, max-length=4KB (0x1000)
##################################################################
define update_at91
  # check NandFlash
  mon nand list
  mon nand probe 0
  # enable
  mon nand raw_access 0 enable
  # erase one block (128KB) at 0x0000_0000
  mon nand erase 0 0x00000000 0x20000
  # write binary data
  mon nand write 0 ../fw/sam9_l9260_hbr-nandflashboot-2.4.bin 0x0
  # verify
  mon nand verify 0 ../fw/sam9_l9260_hbr-nandflashboot-2.4.bin 0x0
  # disable
  mon nand raw_access 0 disable
end

document update_at91
Update AT91Bootstrap in NandFlash
end

##################################################################
# Update final application (BIN-->NandFlash)
#  - address=0x0002_0000, max-length=128KB (0x20000)
##################################################################
define update_app
  # check NandFlash
  mon nand list
  mon nand probe 0
  # enable
  mon nand raw_access 0 enable
  # erase one block (128KB=0x20000) at 0x0002_0000
  mon nand erase 0 0x00020000 0x20000
  # write binary data
  mon nand write 0 ../fw/app.bin 0x00020000
  # verify
  mon nand verify 0 ../fw/app.bin 0x00020000
  # disable
  mon nand raw_access 0 disable
end

document update_app
Update final application in NandFlash
end

##################################################################
# Debug AT91Bootstrap (ELF-->SRAM)
#  -load at address specified in ELF
#  -set initial breakpoints in AT91Bootstrap
#  -start execution of AT91Bootstrap
##################################################################
define debug_at91
  # load AT91Bootstrap
  load
  # set initial breakpoints
  b main
  b hw_init
  # peek at first ten lines of code
  mon reg pc
  mon arm disassemble 0x200000 10
  # start AT91Bootstrap (break at main)
  c
end

document debug_at91
Debug AT91Bootstrap from SRAM
end

##################################################################
# Load and start AT91Bootstrap (BIN-->SRAM)
#  -load binary image to SRAM
#  -set initial hw-breakpoint in AT91Bootstrap
#  -start execution of AT91Bootstrap
##################################################################
define start_at91
  mon load_image ../at91bootstrap/at91bootstrap-2.4-olimex/binaries/sam9_l9260_hbr-nandflashboot-2.4.bin 0x200000 bin
  eval "mon bp 0x%x 4", $AT91_BREAK_ADDR
  mon resume 0x200000
end

document start_at91
Load and start AT91Bootstrap from SRAM
end

##################################################################
# Debug final application (ELF-->SDRAM)
#  -load at address specified in ELF
#  -set initial breakpoint in application
#  -start execution of application
##################################################################
define debug_app
  # remove any initial breakpoint in AT91Bootstrap
  eval "mon rbp 0x%x", $AT91_BREAK_ADDR
  # load application
  load
  # set initial breakpoint
  b c_main
  # peek at first ten lines of code
  mon reg pc
  eval "mon arm disassemble 0x%x 10", $APP_LINK_ADDR
  # start application (break at main)
  c
end

document debug_app
Debug final application from SDRAM
end
